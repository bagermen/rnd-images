on:
  workflow_call:
    inputs:
      ref:
        description: The branch, tag or SHA to checkout
        required: true
        type: string
      environment:
        description: Environment to build images against
        type: string
        required: true
      push:
        description: Push images
        type: boolean
        required: false
        default: true

permissions:
  packages: write
  contents: read

concurrency:
    group: ci-templates-${{ inputs.ref }}
    cancel-in-progress: true
env:
  DEV_IMAGE_NAME: ${{ vars.DEV_IMAGE_NAME }}
  GH_REGISTRY: ghcr.io/${{ github.repository }}
  ROOT_PATH: templates

jobs:
  build_image:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
            ref: ${{ inputs.ref }}
            sparse-checkout: |
              .github
              ${{ env.ROOT_PATH }}

      - id: variants
        uses: ./.github/actions/image-variants

      - id: read_current_image_version
        uses: ashley-taylor/read-json-property-action@v1.2
        with:
          path: .github/.release-manifest.json
          property: devcontainer

      - name: Make compose file copy
        uses: actions/github-script@v7
        with:
          script: |
            const path = require('node:path');
            const fs = require('node:fs/promises');

            const escapedImageName = '${{ env.GH_REGISTRY }}/${{ env.DEV_IMAGE_NAME }}'.replaceAll('/', '\\/').replaceAll('.', '\\.');
            const variants = JSON.parse('${{ steps.variants.outputs.matrix }}');
            const basePath = '${{ env.ROOT_PATH }}';
            const composeGlobber = await glob.create(`${basePath}/**/compose.yaml`);
            const composes = await composeGlobber.glob();

            for (const composePath of composes) {
              const composeTpl = `${composePath}.tpl`;
              const parsedComposePath = path.parse(composePath);
              const tplDir = path.dirname(parsedComposePath.dir);
              const tpl = JSON.parse(await fs.readFile(`${tplDir}/devcontainer-template.json`, 'utf8'));
              const filteredVariants = [...variants.filter(v => v.variant === ''), ...variants.filter(v => tpl.options.os.proposals.includes(v.variant))];

              await io.mv(composePath, composeTpl);

              for (const variant of filteredVariants) {
                const newComposePath = `${parsedComposePath.dir}/${parsedComposePath.name}${variant.variant}${parsedComposePath.ext}`;
                const reg = new RegExp(`(?<=image:\\s*${escapedImageName}:)([\\d\\.]+)`, 'm');

                await io.cp(composeTpl, newComposePath);
                const yml = await fs.readFile(newComposePath, 'utf8');
                const matched = yml.match(reg);

                if (matched) {
                  core.info(`Matched image version: ${matched[1]}`);
                  await fs.writeFile(newComposePath, yml.replace(reg, `${{ steps.read_current_image_version.outputs.value }}${variant.variant}`), 'utf8');
                  core.info(`Created file: ${newComposePath}`);
                }
              }

              await fs.unlink(composeTpl);
            }

      - name: Build and optionally push image
        uses: devcontainers/action@v1
        with:
          publish-templates: ${{ inputs.push && 'true' || 'false' }}
          oci-registry-for-templates: 'ghcr.io'
          templates-namespace: ${{ github.repository }}
          disable-repo-tagging: 'true'
          base-path-to-templates: ./${{ env.ROOT_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
