on:
  workflow_call:
    inputs:
      ref:
        description: The branch, tag or SHA to checkout
        required: true
        type: string
      environment:
        description: Environment to build images against
        type: string
        required: true
      push:
        description: Push images
        type: boolean
        required: false
        default: true

permissions:
  packages: write
  contents: read

concurrency:
    group: ci-templates-${{ inputs.ref }}
    cancel-in-progress: true
env:
  DEV_IMAGE_NAME: ${{ vars.DEV_IMAGE_NAME }}
  GH_REGISTRY: ghcr.io/${{ github.repository }}
  ROOT_PATH: templates

jobs:
  build_image:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
            ref: ${{ inputs.ref }}
            sparse-checkout: |
              .github
              ${{ env.ROOT_PATH }}

      - id: read_current_image_version
        uses: ashley-taylor/read-json-property-action@v1.2
        with:
          path: .github/.release-manifest.json
          property: devcontainer

      - name: Make compose file copy
        uses: actions/github-script@v7
        with:
          script: |
            const path = require('node:path');
            const fs = require('node:fs/promises');

            const escapedImageName = '${{ env.GH_REGISTRY }}/${{ env.DEV_IMAGE_NAME }}'.replaceAll('/', '\\/').replaceAll('.', '\\.');
            const basePath = '${{ env.ROOT_PATH }}';
            const composeGlobber = await glob.create(`${basePath}/**/compose.*.yaml`);
            const composeDirs = (await composeGlobber.glob()).map(file => path.dirname(file));

            for (const composeDir of new Set(composeDirs)) {
              const envFile = `${composeDir}/.env`;
              let env, envContent;

              try {
                env = await fs.open(envFile);
                envContent = await fs.readFile(env, 'utf8');
              } catch (e) {
                continue;
              } finally {
                env?.close();
              }

              core.info(`Matched directory: ${composeDir}`);
              const reg = new RegExp(`(?<=image:\\s*${escapedImageName}:)([\\d\\.]+)`, 'm');
              const matched = envContent.match(reg);

              if (matched) {
                core.info(`Matched image version: ${matched[1]}`);
                await fs.writeFile(envFile, envContent.replace(reg, `${{ steps.read_current_image_version.outputs.value }}`), 'utf8');
                core.info(await fs.readFile(envFile, 'utf8'));
              }
            }

      # - uses: qoomon/actions--create-commit@v1
      #   id: commit
      #   with:
      #     message: work work
      #     skip-empty: true

      # - if: ${{ steps.commit.outputs.commit }}
      #   run: git push

      - name: Build and optionally push image
        uses: devcontainers/action@v1
        with:
          generate-docs: ${{ inputs.push && 'true' || 'false' }}
          publish-templates: ${{ inputs.push && 'true' || 'false' }}
          oci-registry-for-templates: 'ghcr.io'
          templates-namespace: ${{ github.repository }}
          disable-repo-tagging: 'true'
          base-path-to-templates: ./${{ env.ROOT_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
