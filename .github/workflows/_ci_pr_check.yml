name: ci / pr check
on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
      - release-*

jobs:
  check_changes:
    if: ${{ github.event.pull_request.draft == false && !contains(join(github.event.pull_request.labels.*.name), 'autorelease') }}
    runs-on: ubuntu-latest
    environment: production
    outputs:
      base_modified: ${{ steps.check_files.outputs.any_modified == 'true' && steps.base.outputs.any_modified == 'true' }}
      devcontainer_modified: ${{ steps.check_files.outputs.any_modified == 'true' && steps.devcontainer.outputs.any_modified == 'true' }}
      templates_modified: ${{ steps.check_files.outputs.any_modified == 'true' && steps.templates.outputs.any_modified == 'true' }}
      image_variants: ${{ steps.variants.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - id: variants
        uses: ./.github/actions/image-variants

      - id: check_files
        uses: tj-actions/changed-files@v45
        with:
          since_last_remote_commit: true
          files: |
            !.github/**
            !*.md
            !**/docs/**
            !.editorconfig
            !LICENSE
      - id: parent_commit
        env:
          SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          echo "SHA=$(git rev-list --skip=1 -1 $SHA)" >> $GITHUB_OUTPUT
      - id: last-ref-status
        if: ${{ steps.check_files.outputs.any_modified == 'false' && steps.check_files.outputs.other_modified_files_count > 0 && steps.parent_commit.outputs.SHA != github.event.pull_request.base.sha }}
        uses: danieldeichfuss/get-status@v0.0.10
        with:
            ref: ${{ steps.parent_commit.outputs.SHA }}
      - if: ${{ steps.check_files.outputs.any_modified == 'false' && steps.check_files.outputs.other_modified_files_count > 0 && steps.last-ref-status.outputs.all-checks-completed == 'true' && steps.last-ref-status.outputs.all-checks-passed == 'false' && steps.parent_commit.outputs.SHA != github.event.pull_request.base.sha }}
        uses: actions/github-script@v7
        with:
          script:  core.setFailed('Required checks has been failed')

      - id: base
        uses: tj-actions/changed-files@v45
        with:
          since_last_remote_commit: true
          path: base
      - id: devcontainer
        uses: tj-actions/changed-files@v45
        with:
          since_last_remote_commit: true
          path: devcontainer
      - id: templates
        uses: tj-actions/changed-files@v45
        with:
          since_last_remote_commit: true
          path: templates

  test_base_image:
    needs: [check_changes]
    if: ${{ !cancelled() && !failure() && needs.check_changes.outputs.base_modified == 'true' }}
    strategy:
      matrix:
        include: ${{ fromJSON(needs.check_changes.outputs.image_variants) }}

    secrets: inherit
    permissions:
      packages: write
      contents: read
      id-token: write
      attestations: write

    uses: ./.github/workflows/_wc_build_base_image.yml
    with:
      ref: ${{ github.ref }}
      environment: production
      dockerfile: ${{ matrix.file }}
      suffix: ${{ matrix.variant }}
      push: false

  test_devcontainer_image:
    needs: [check_changes]
    if: ${{ !cancelled() && !failure() && needs.check_changes.outputs.devcontainer_modified == 'true' }}
    strategy:
      matrix:
        include: ${{ fromJSON(needs.check_changes.outputs.image_variants) }}

    secrets: inherit
    permissions:
      packages: write
      contents: read

    uses: ./.github/workflows/_wc_build_devcontainer.yml
    with:
      ref: ${{ github.ref }}
      environment: production
      suffix: ${{ matrix.variant }}
      push: false

  test_templates:
    needs: [check_changes]
    if: ${{ !cancelled() && !failure() && needs.check_changes.outputs.templates_modified == 'true' }}
    uses: ./.github/workflows/_wc_build_templates.yml
    permissions:
      packages: write
      contents: read
    secrets: inherit
    with:
      ref: ${{ github.ref }}
      environment: production
      push: false

      # temporary
  update_templates:
    runs-on: ubuntu-latest
    environment: development
    env:
      DEV_IMAGE_NAME: ${{ vars.DEV_IMAGE_NAME }}
      GH_REGISTRY: ghcr.io/${{ github.repository }}
      ROOT_PATH: templates
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
            ref: ${{ github.ref }}
            sparse-checkout: |
              .github
              templates

      - id: read_current_image_version
        uses: ashley-taylor/read-json-property-action@v1.2
        with:
          path: .github/.release-manifest.json
          property: devcontainer

      - name: Update devcontainer image version in templates
        uses: actions/github-script@v7
        with:
          script: |
            const path = require('node:path');
            const fs = require('node:fs/promises');
            const basePath = '${{ env.ROOT_PATH }}';
            const globber = await glob.create(`${basePath}/**/.devcontainer/devcontainer.json`);
            const dirs = (await globber.glob()).map(file => path.dirname(file));

            for (const devDir of new Set(dirs)) {
              const escapedImageName = '${{ env.GH_REGISTRY }}/${{ env.DEV_IMAGE_NAME }}'.replaceAll('/', '\\/').replaceAll('.', '\\.');
              core.info(`escapedImageName: ${escapedImageName}`);
              let reg = new RegExp(`(?<=DEVCONTAINER=${escapedImageName}:)([\\d\\.]+)`, 'm');
              let file = `${devDir}/.env`;
              let hasEnv = true;
              let env, fileContent;
              core.info(`file: ${file}`);

              try {
                env = await fs.open(file);
                fileContent = await fs.readFile(env, 'utf8');
              } catch (e) {
                hasEnv = false;
                continue;
              } finally {
                env?.close();
              }

              core.info(`Matched directory: ${devDir}`);

              if (hasEnv === false) {
                reg = new RegExp(`(?<="image":\s+"${escapedImageName}:)([\\d\\.]+)`, 'm');
                file = `${devDir}/devcontainer.json`;
              }
              const matched = fileContent.match(reg);

              if (matched) {
                core.info(`Matched image version: ${matched[1]}`);
                await fs.writeFile(file, fileContent.replace(reg, `${{ steps.read_current_image_version.outputs.value }}`), 'utf8');
              }
            }

