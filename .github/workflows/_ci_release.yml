name: ci / release

on:
  push:
    branches:
      - main
      - release-*
jobs:
  release_please:
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: write
      pull-requests: write

    outputs:
      image_variants: ${{ steps.variants.outputs.matrix }}
      releases_created: ${{ steps.release_please.outputs.releases_created }}
      base_released: ${{ steps.release_please.outputs.base--release_created }}
      base_tag_name: ${{ steps.release_please.outputs.base--tag_name }}
      base_major_released: ${{ steps.release_please.outputs.releases_created && steps.release_please.outputs.base--major > steps.parse_current_base_version.outputs.major }}
      devcontainer_released: ${{ steps.release_please.outputs.devcontainer--release_created }}
      devcontainer_tag_name: ${{ steps.release_please.outputs.devcontainer--tag_name }}
      templates_released: ${{ steps.release_please.outputs['templates/compose-template--release_created'] }}

    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: .github

      - id: variants
        uses: ./.github/actions/image-variants

      - id: read_current_base_version
        uses: ashley-taylor/read-json-property-action@v1.2
        with:
          path: .github/.release-manifest.json
          property: base

      - id: parse_current_base_version
        uses: release-kit/semver@v2
        with:
          string: ${{ steps.read_current_base_version.outputs.value }}

      - uses: googleapis/release-please-action@v4
        id: release_please
        with:
          token: ${{ secrets.PAT }}
          config-file: .github/release-config.json
          manifest-file: .github/.release-manifest.json
          include-component-in-tag: true

      - uses: ./.github/actions/create-release-refs
        if: ${{ steps.release_please.outputs.base--release_created == 'true' }}
        with:
          component: base
          major: ${{ steps.release_please.outputs.base--major }}
          minor: ${{ steps.release_please.outputs.base--minor }}

      - uses: ./.github/actions/create-release-refs
        if: ${{ steps.release_please.outputs.devcontainer--release_created == 'true' }}
        with:
          component: devcontainer
          major: ${{ steps.release_please.outputs.devcontainer--major }}
          minor: ${{ steps.release_please.outputs.devcontainer--minor }}

  publish_base_image:
    needs: [release_please]
    if: ${{ !cancelled() && !failure() && needs.release_please.outputs.base_released == 'true' }}
    strategy:
      matrix:
        include: ${{ fromJSON(needs.release_please.outputs.image_variants) }}

    secrets: inherit
    permissions:
      packages: write
      contents: read
      id-token: write
      attestations: write

    uses: ./.github/workflows/_wc_build_base_image.yml
    with:
      ref: ${{ needs.release_please.outputs.base_tag_name }}
      environment: production
      dockerfile: ${{ matrix.file }}
      suffix: ${{ matrix.variant }}
      push: true

  publish_devcontainer_image:
    needs: [release_please, publish_base_image]
    if: ${{ !cancelled() && !failure() && (needs.release_please.outputs.devcontainer_released == 'true' || (needs.release_please.outputs.base_released == 'true' && needs.release_please.outputs.base_major_released != 'true')) }}
    strategy:
      matrix:
        include: ${{ fromJSON(needs.release_please.outputs.image_variants) }}

    secrets: inherit
    permissions:
      packages: write
      contents: read

    uses: ./.github/workflows/_wc_build_devcontainer.yml
    with:
      ref: ${{ needs.release_please.outputs.devcontainer_tag_name }}
      environment: production
      suffix: ${{ matrix.variant }}
      push: true

  update_templates:
    if: ${{ !cancelled() && !failure() && needs.release_please.outputs.devcontainer_released == 'true' }}
    needs: [release_please]
    runs-on: ubuntu-latest
    environment: development
    env:
      DEV_IMAGE_NAME: ${{ vars.DEV_IMAGE_NAME }}
      GH_REGISTRY: ghcr.io/${{ github.repository }}
      ROOT_PATH: templates
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
            ref: ${{ github.ref }}
            sparse-checkout: |
              .github
              templates

      - id: read_current_image_version
        uses: ashley-taylor/read-json-property-action@v1.2
        with:
          path: .github/.release-manifest.json
          property: devcontainer

      - name: Update devcontainer image version in templates
        uses: actions/github-script@v7
        with:
          script: |
            const path = require('node:path');
            const fs = require('node:fs/promises');
            const basePath = '${{ env.ROOT_PATH }}';
            const globber = await glob.create(`${basePath}/**/.devcontainer/devcontainer.json`);
            const dirs = (await globber.glob()).map(file => path.dirname(file));

            for (const devDir of new Set(dirs)) {
              const escapedImageName = '${{ env.GH_REGISTRY }}/${{ env.DEV_IMAGE_NAME }}'.replaceAll('/', '\\/').replaceAll('.', '\\.');
              let reg = new RegExp(`(?<=DEVCONTAINER=${escapedImageName}:)([\\d\\.]+)`, 'm');
              let file = `${devDir}/.env`;
              let hasEnv = true;
              let env, fileContent;

              try {
                env = await fs.open(file);
                fileContent = await fs.readFile(env, 'utf8');
              } catch (e) {
                hasEnv = false;
                continue;
              } finally {
                env?.close();
              }

              core.info(`Matched template path: ${devDir}`);

              if (hasEnv === false) {
                reg = new RegExp(`(?<="image":\s+"${escapedImageName}:)([\\d\\.]+)`, 'm');
                file = `${devDir}/devcontainer.json`;
              }
              const matched = fileContent.match(reg);

              if (matched) {
                core.info(`Update image version from ${matched[1]} to ${{ steps.read_current_image_version.outputs.value }}`);
                await fs.writeFile(file, fileContent.replace(reg, `${{ steps.read_current_image_version.outputs.value }}`), 'utf8');
              }
            }

      - uses: qoomon/actions--create-commit@v1
        id: commit
        with:
          message: 'feat: update devcontainer version to ${{ steps.read_current_image_version.outputs.value }}'
          skip-empty: true

      - if: ${{ steps.commit.outputs.commit }}
        run: git push

  publish_templates:
    needs: [release_please]
    if: ${{ !cancelled() && !failure() && needs.release_please.outputs.templates_released == 'true' && needs.release_please.outputs.devcontainer_released != 'true' }}

    secrets: inherit
    permissions:
      packages: write
      contents: read

    uses: ./.github/workflows/_wc_build_templates.yml
    with:
      ref: ${{ github.ref }}
      environment: production
      push: true

  label_release:
    runs-on: ubuntu-latest
    environment: production
    needs: [release_please, publish_base_image, publish_devcontainer_image]
    if: ${{ !cancelled() && !failure() && needs.release_please.outputs.releases_created == 'true' }}

    permissions:
      pull-requests: write
      contents: read

    steps:
      - uses: cloudposse-github-actions/get-pr@v2
        id: pr
      - uses: PauMAVA/add-remove-label-action@v1.0.3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          issue_number: ${{ steps.pr.outputs.number }}
          add: 'autorelease: published'
