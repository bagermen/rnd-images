on:
  workflow_call:
    inputs:
      ref:
        description: The branch, tag or SHA to checkout
        required: true
        type: string
      environment:
        description: Environment to build images against
        type: string
        required: true
      dockerfile:
        description: Dockerfile
        default: Dockerfile
        type: string
        required: false
      suffix:
        description: Image OS suffix
        default: ''
        type: string
        required: false
      push:
        description: Push images
        type: boolean
        required: false
        default: true
    outputs:
      imageid:
        description: Image ID
        value: ${{ jobs.build_image.outputs.imageid }}
      digest:
        description: Image digest
        value: ${{ jobs.build_image.outputs.digest }}

permissions:
  packages: write
  contents: read
  id-token: write
  attestations: write

concurrency:
    group: ci-base-${{ inputs.ref }}-${{ inputs.dockerfile }}-${{ inputs.suffix }}
    cancel-in-progress: true

env:
  IMAGE_NAME: ${{ vars.BASE_IMAGE_NAME }}
  GH_REGISTRY: ghcr.io/${{ github.repository }}
  ROOT_PATH: base

jobs:
  build_image:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      imageid: ${{ steps.build.outputs.imageid }}
      digest: ${{ steps.build.outputs.digest }}
      images: ${{ toJson(steps.meta.outputs.tags) }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          sparse-checkout: ${{ env.ROOT_PATH }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Parse tag from the ref
        id: tag_name
        uses: kaisugi/action-regex-match@v1.0.1
        with:
          text: ${{ inputs.ref }}
          regex: "^${{ env.ROOT_PATH }}-(.*)$"
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          flavor: |
            latest=false
            suffix=${{ inputs.suffix }}
          labels: |
            org.opencontainers.image.title=rnd
            org.opencontainers.image.description=base rnd image
          images: |
            ${{ env.GH_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # releases
            type=semver,priority=900,pattern={{version}},value=${{ steps.tag_name.outputs.group1 }},enable=${{ steps.tag_name.outputs.group1 != '' }}
            type=semver,priority=900,pattern={{major}}.{{minor}},value=${{ steps.tag_name.outputs.group1 }},enable=${{ steps.tag_name.outputs.group1 != '' }}
            type=semver,priority=900,pattern={{major}},value=${{ steps.tag_name.outputs.group1 }},enable=${{ steps.tag_name.outputs.group1 != '' }}
            # edge
            type=edge,priority=700
            # branch
            type=ref,priority=600,event=branch,enable=${{ steps.tag_name.outputs.group1 == '' }}
            # pr
            type=ref,priority=600,event=pr,enable=${{ steps.tag_name.outputs.group1 == '' }}

      - if: ${{ success() && steps.meta.outputs.tags == '' }}
        uses: actions/github-script@v7
        with:
          script:  core.setFailed('Tags were not set')

      - name: Build and optionally push image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.ROOT_PATH }}
          file: ${{ env.ROOT_PATH }}/${{ inputs.dockerfile }}
          push: ${{ vars.ACTIONS_STEP_DEBUG != 'true' && inputs.push }}
          sbom: ${{ vars.ACTIONS_STEP_DEBUG != 'true' && inputs.push }}
          tags: ${{ steps.meta.outputs.tags }}
          annotations: ${{ steps.meta.outputs.annotations }}
          build-args: |
            cache-from: type=gha
            cache-to: type=gha,mode=max
            SUFFIX=${{ inputs.suffix }}
          secrets: |
            "github-username=${{ github.actor }}"
            "github-namespace=${{ github.actor }}"
            "github-password=${{ secrets.PKG_READONLY }}"

      - name: Generate artifact attestation (GitHub)
        if: ${{ success() && vars.ACTIONS_STEP_DEBUG != 'true' && inputs.push }}
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.GH_REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push-to-registry: true
