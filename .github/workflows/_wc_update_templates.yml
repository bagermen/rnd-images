on:
  workflow_call:
    inputs:
      ref:
        description: The branch, tag or SHA to checkout
        required: true
        type: string
      environment:
        description: Environment to build images against
        type: string
        required: true

permissions:
  contents: write
  pull-requests: write

concurrency:
    group: ci-update-templates-${{ inputs.ref }}
    cancel-in-progress: true
env:
  DEV_IMAGE_NAME: ${{ vars.DEV_IMAGE_NAME }}
  GH_REGISTRY: ghcr.io/${{ github.repository }}
  ROOT_PATH: templates

jobs:
  build_image:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
            ref: ${{ inputs.ref }}
            sparse-checkout: |
              .github
              ${{ env.ROOT_PATH }}

      - id: read_current_image_version
        uses: ashley-taylor/read-json-property-action@v1.2
        with:
          path: .github/.release-manifest.json
          property: devcontainer

      - name: Update devcontainer image version in templates
        uses: actions/github-script@v7
        with:
          script: |
            const path = require('node:path');
            const fs = require('node:fs/promises');
            const basePath = '${{ env.ROOT_PATH }}';
            const globber = await glob.create(`${basePath}/**/.devcontainer/devcontainer.json`);
            const dirs = (await globber.glob()).map(file => path.dirname(file));

            for (const devDir of new Set(dirs)) {
              const escapedImageName = '${{ env.GH_REGISTRY }}/${{ env.DEV_IMAGE_NAME }}'.replaceAll('/', '\\/').replaceAll('.', '\\.');
              let reg = new RegExp(`(?<=DEVCONTAINER=${escapedImageName}:)([\\d\\.]+)`, 'm');
              let filePath = `${devDir}/.env`;
              let hasEnv = true;
              let env, fileContent;

              try {
                env = await fs.open(filePath);
                fileContent = await fs.readFile(env, 'utf8');
              } catch (e) {
                hasEnv = false;
                continue;
              } finally {
                env?.close();
              }

              core.info(`Matched template path: ${devDir}`);

              if (hasEnv === false) {
                reg = new RegExp(`(?<="image":\s+"${escapedImageName}:)([\\d\\.]+)`, 'm');
                filePath = `${devDir}/devcontainer.json`;
              }
              const matched = fileContent.match(reg);

              if (matched) {
                core.info(`Update image version from ${matched[1]} to ${{ steps.read_current_image_version.outputs.value }}`);
                core.info(`file: ${filePath}`);
                await fs.writeFile(filePath, fileContent.replace(reg, `${{ steps.read_current_image_version.outputs.value }}`), 'utf8');
                await exec.exec('git', ['add', filePath]);
              }
            }

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        env:
          MESSAGE: 'feat: update templates devcontainer version to ${{ steps.read_current_image_version.outputs.value }}'
        with:
          token: ${{ secrets.PAT }}
          delete-branch: true
          commit-message: ${{ env.MESSAGE }}
          title: ${{ env.MESSAGE }}
          branch: auto-update-templates-devcontainer
          labels: |
            enhancement
